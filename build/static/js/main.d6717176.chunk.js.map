{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["console","log","process","API_KEY","App","props","componentDidUpdate","a","fetch","state","city","res","json","get","setState","weather_type","weather","description","max_temperature","main","temp_max","toFixed","min_temperature","temp_min","wind_speed","wind","speed","err","cty","this","type","onChange","target","value","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTAIAA,QAAQC,IAAIC,qGAAYC,S,IAEHC,E,YACnB,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAURC,mBAXkB,qBAWG,8BAAAC,EAAA,qEACCC,MAAM,qDAAD,OAAsD,EAAKC,MAAMC,KAAjE,kBAA+ER,qGAAYC,UADjG,cACXQ,EADW,gBAECA,EAAIC,OAFL,OAEXC,EAFW,OAGjB,IACE,EAAKC,SAAS,CACZC,aAAcF,EAAIG,QAAQ,GAAGC,YAC7BC,iBAAkBL,EAAIM,KAAKC,SAAW,QAAQC,QAAQ,GAAK,QAC3DC,iBAAkBT,EAAIM,KAAKI,SAAW,QAAQF,QAAQ,GAAK,QAC3DG,WAAaX,EAAIY,KAAKC,MAAOL,QAAQ,GAAK,UAI9C,MAAMM,GACJ,EAAKb,SAAS,CACZC,aAAc,GACdO,gBAAiB,EACjBJ,gBAAiB,EACjBM,WAAY,IAjBC,yCATnB,EAAKf,MAAQ,CACXC,KAAM,GACNK,aAAc,GACdO,gBAAiB,EACjBJ,gBAAiB,EACjBM,WAAY,GAPE,E,kEAiCbI,GACHC,KAAKf,SAAS,CACZJ,KAAMkB,M,+BAID,IAAD,OACJ,OACE,6BACE,oCACA,4BAAKC,KAAKpB,MAAMC,MAFlB,IAGE,2BAAOoB,KAAK,OAAOC,SAAU,SAACH,GAAD,OAAS,EAAKlB,KAAKkB,EAAII,OAAOC,QAAQC,YAAY,oBAHjF,IAIE,6BACA,4CACA,4BAAKL,KAAKpB,MAAMM,cAChB,6BACA,+CACA,4BAAKc,KAAKpB,MAAMS,iBAChB,6BACA,+CACA,4BAAKW,KAAKpB,MAAMa,iBAChB,6BACA,0CACA,4BAAKO,KAAKpB,MAAMe,iB,GAzDOW,IAAMC,WCMnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d6717176.chunk.js","sourcesContent":["import React from 'react';\nimport 'isomorphic-fetch';\nimport './App.css';\n\nconsole.log(process.env.API_KEY)\n\nexport default class App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = { //Creates the state for the Class.\n      city: \"\",\n      weather_type: \"\",\n      min_temperature: 0,\n      max_temperature: 0,\n      wind_speed: 0,\n    }\n  }\n\n  componentDidUpdate = async() => { //\" + this.state.city + \"\n      const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=${process.env.API_KEY}`); //fetches the api based on the cities name in the state.\n      const get = await res.json(); //Converts the api from a string into code. \n      try {\n        this.setState({ //Sets the state to the chosen converted data.\n          weather_type: get.weather[0].description,\n          max_temperature: (get.main.temp_max - 273.15).toFixed(0) + \"°C\", //Converts the from kelvin to degrees celsius and put it no decimal places.\n          min_temperature: (get.main.temp_min - 273.15).toFixed(0) + \"°C\",\n          wind_speed: (get.wind.speed).toFixed(0) + \" km/h\",\n          \n        })\n      }\n      catch(err){ //If there is an error retrieving the data or it's not available it will return this.\n        this.setState({ //Sets the state.\n          weather_type: \"\",\n          min_temperature: 0,\n          max_temperature: 0,\n          wind_speed: 0,\n        })\n      }\n    }\n    \n  city(cty) {\n    this.setState({\n      city: cty //Recieves event data and assigns it to city in the state.\n    })\n  }\n\n  render(){\n      return (\n        <div>\n          <h1>City</h1>\n          <h2>{this.state.city}</h2> {/*Recieves information from the state and displays it.*/}\n          <input type=\"text\" onChange={(cty) => this.city(cty.target.value)} placeholder=\"Enter city name\"/> {/*Updates event on change and sends data to 'city()'.*/}\n          <hr/>\n          <h1>Weather type</h1>\n          <h2>{this.state.weather_type}</h2>\n          <hr/>\n          <h1>Max Temperature</h1>\n          <h2>{this.state.max_temperature}</h2>\n          <hr/>\n          <h1>Min Temperature</h1>\n          <h2>{this.state.min_temperature}</h2>\n          <hr/>\n          <h1>Wind speed</h1>\n          <h2>{this.state.wind_speed}</h2>\n        </div>\n      );\n    \n    }\n  }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}